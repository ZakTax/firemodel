package ts

import (
	"github.com/pkg/errors"
	"github.com/iancoleman/strcase"
	"fmt"
	"text/template"
	"github.com/mickeyreiss/firemodel"
)

func init() {
	firemodel.RegisterModeler("ts", &Modeler{})
}

type Modeler struct{}

func (m *Modeler) Model(schema *firemodel.Schema, sourceCoder firemodel.SourceCoder) error {
	f, err := sourceCoder.NewFile("firemodel.d.ts")
	if err != nil {
		return errors.Wrapf(err, "firemodel/ts: create typescript file")
	}
	defer f.Close()

	if err := tpl.Execute(f, schema); err != nil {
		return errors.Wrapf(err, "firemodel/ts: generating typescript")
	}
	return nil
}

var (
	tpl = template.Must(template.
		New("file").
		Funcs(map[string]interface{}{
			"toTypescriptType":  toTypescriptType,
			"ToScreamingSnake":  strcase.ToScreamingSnake,
			"ToLowerCamel":      strcase.ToLowerCamel,
			"ToCamel":           strcase.ToCamel,
			"getRequiredOption": getRequiredOption,
			"interfaceName":     interfaceName,
		}).
		Parse(file),
	)
	_ = template.Must(tpl.New("model").Parse(model))
	_ = template.Must(tpl.New("enum").Parse(enum))
)

func interfaceName(sym string) string {
	return fmt.Sprintf("I%s", sym)
}

func toTypescriptType(firetype firemodel.SchemaFieldType, extras *firemodel.SchemaFieldExtras) string {
	switch firetype {
	case firemodel.Boolean:
		return "boolean"
	case firemodel.Integer, firemodel.Double:
		return "number"
	case firemodel.Timestamp:
		return "firestore.Timestamp"
	case firemodel.String:
		if extras != nil && extras.EnumType != "" {
			return extras.EnumType
		} else if extras != nil && extras.URL {
			return "URL"
		} else {
			return "string"
		}
	case firemodel.Bytes:
		return "firestore.Blob"
	case firemodel.Reference:
		if extras != nil && extras.ReferenceTo != "" {
			return fmt.Sprintf("DocumentReference<%s>", interfaceName(extras.ReferenceTo))
		} else {
			return "firestore.DocumentReference"
		}
	case firemodel.GeoPoint:
		return "firestore.GeoPoint"
	case firemodel.Array:
		if extras != nil && extras.ArrayOf != "" {
			return fmt.Sprintf("%s[]", interfaceName(extras.ArrayOf))
		} else if extras != nil && extras.ArrayOfPrimitive != "" {
			return fmt.Sprintf("%s[]", extras.ArrayOfPrimitive)
		} else {
			return "any[]"
		}
	case firemodel.Map:
		if extras != nil && extras.File {
			return "IFile"
		} else if extras != nil && extras.MapTo != "" {
			return fmt.Sprintf("{ [key: string]: %s; }", interfaceName(extras.MapTo))
		} else if extras != nil && extras.MapToPrimitive != "" {
			return fmt.Sprintf("{ [key: string]: %s; }", extras.MapToPrimitive)
		} else {
			return `{ [key: string]: any; }`
		}
	default:
		err := errors.Errorf("firemodel/ts: unknown type %s", firetype)
		panic(err)
	}
}

func getRequiredOption(key string, options firemodel.SchemaOptions) string {
	ts, ok := options["ts"]
	if !ok {
		err := errors.Errorf("option ts.%s is required but not set", key)
		panic(err)
	}
	opt, ok := ts[key]
	if !ok {
		err := errors.Errorf("option ts.%s is required but not set", key)
		panic(err)
	}
	return opt
}

const (
	file = `// DO NOT EDIT - Code generated by firemodel.

import firestore from 'firebase/firestore';

export namespace {{.Options | getRequiredOption "namespace"}} {
  type URL = string;

  export interface IFile {
    url: URL;
    mimeType: string;
    name: string;
  };

  interface DocumentReference<T> extends firestore.DocumentReference {
  };

  {{- range .Enums -}}
  {{- template "enum" .}}
  {{- end}}
  {{- range .Models -}}
  {{- template "model" .}}
  {{- end}}
}
`
	model = `
  {{- if .Comment}}

  /** {{.Comment}} */
  {{- else}}

  /** TODO: Add documentation to {{.Name}}. */
  {{- end}}
  export interface {{.Name | interfaceName | ToCamel}} {
    {{- range .Fields}}
    {{- if .Comment}}
    /** {{.Comment}} */
    {{- else }}
    /** TODO: Add documentation to {{.Name}}. */
    {{- end}}
    {{.Name | ToLowerCamel -}}: {{toTypescriptType .Type .Extras}};
    {{- end}}
  };`

	enum = `
  {{- if .Comment}}

  /** {{.Comment}} */
  {{- else}}

  /** TODO: Add documentation to {{.Name}}. */
  {{- end}}
  enum {{.Name | ToCamel}} {
    {{- range .Values}}
    {{- if .Comment}}
    /** {{.Comment}} */
    {{- else}}
    /** TODO: Add documentation to {{.Name}}. */
    {{- end}}
    {{.Name}} = "{{.Name | ToScreamingSnake}}",
    {{- end}}
  };`
)
