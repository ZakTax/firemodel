===================== ./swift/ ===================
===================== Open firemodel.swift ===================
// DO NOT EDIT - Code generated by firemodel.

import Foundation
import Pring


// TODO: Add documentation to Direction.
@objc enum Direction: String {
	// TODO: Add documentation to left.
	case left = LEFT
	// TODO: Add documentation to right.
	case right = RIGHT
	// TODO: Add documentation to up.
	case up = UP
	// TODO: Add documentation to down.
	case down = DOWN
}
	
// A Test is a test model.
@objcMembers class TestModel: Pring.Object {
	// The name.
	dynamic var name: String?
	// The age.
	dynamic var age: Int = 0
	// The number pi.
	dynamic var pi: Float = 0.0
	// The birth date.
	dynamic var birthdate: Date = Date()
	// True if it is good.
	dynamic var isGood: Bool = false
	// TODO: Add documentation to data.
	dynamic var data: Data?
	// TODO: Add documentation to friend.
	dynamic var friend: Pring.Reference<TestModel> = .init()
	// TODO: Add documentation to location.
	dynamic var location: Pring.GeoPoint
	// TODO: Add documentation to colors.
	dynamic var colors: Array<String?>
	// TODO: Add documentation to meta.
	dynamic var meta: [AnyHashable: Any] = []
	// TODO: Add documentation to direction.
	dynamic var direction: Direction
	// TODO: Add documentation to test_file.
	dynamic var testFile: Pring.File
	// TODO: Add documentation to url.
	dynamic var url: URL?
	// TODO: Add documentation to nested.
	dynamic var nested: TestModel?


	override func encode(_ key: String, value: Any?) -> Any? {
		switch key {
			case "direction":
			return self.direction.rawValue
		default:
			break
		}
		return nil
	}

	override func decode(_ key: String, value: Any?) -> Bool {
		switch key {
			case "direction":
			if let value = value as? String, let direction = string(rawValue: value) {
				self.direction = direction
				return true
			}
			default:
			break
		}
		return false
	}
}
	
===================== Close ===================
===================== Flush ===================
===================== ./go ===================
===================== Open test_model.firemodel.go ===================
// DO NOT EDIT - Code generated by firemodel.

package firemodel

import (
	firestore "cloud.google.com/go/firestore"
	runtime "github.com/mickeyreiss/firemodel/runtime"
	latlng "google.golang.org/genproto/googleapis/type/latlng"
	"time"
)

// A Test is a test model.
type TestModel struct {
	// The name.
	Name string `firestore:"name"`
	// The age.
	Age int64 `firestore:"age"`
	// The number pi.
	Pi float64 `firestore:"pi"`
	// The birth date.
	Birthdate time.Time `firestore:"birthdate"`
	// True if it is good.
	IsGood bool `firestore:"is_good"`
	// TODO: Add comment to TestModel.data.
	Data []byte `firestore:"data"`
	// TODO: Add comment to TestModel.friend.
	Friend *firestore.DocumentRef `firestore:"friend"`
	// TODO: Add comment to TestModel.location.
	Location *latlng.LatLng `firestore:"location"`
	// TODO: Add comment to TestModel.colors.
	Colors []string `firestore:"colors"`
	// TODO: Add comment to TestModel.meta.
	Meta map[string]interface{} `firestore:"meta"`
	// TODO: Add comment to TestModel.direction.
	Direction Direction `firestore:"direction"`
	// TODO: Add comment to TestModel.test_file.
	TestFile *runtime.File `firestore:"test_file"`
	// TODO: Add comment to TestModel.url.
	Url runtime.URL `firestore:"url"`
	// TODO: Add comment to TestModel.nested.
	Nested *TestModel `firestore:"nested"`
}
===================== Close ===================
===================== Open direction.firemodel.go ===================
// DO NOT EDIT - Code generated by firemodel.

package firemodel

// TODO: Add comment to Direction
type Direction string

const (
	left  Direction = "LEFT"
	right           = "RIGHT"
	up              = "UP"
	down            = "DOWN"
)
===================== Close ===================
===================== Flush ===================
===================== ./ts/ ===================
===================== Open firemodel.d.ts ===================
// DO NOT EDIT - Code generated by firemodel.

import firestore from 'firebase/firestore';

export namespace example {
    type URL = string;

    export interface IFile {
        url: URL;
        mimeType: string;
        name: string;
    }

    interface DocumentReference<T> extends firestore.DocumentReference {
    }

    
    /** TODO: Add documentation to Direction. */
    enum Direction {
        /** TODO: Add documentation to left. */
        left = "LEFT",
        /** TODO: Add documentation to right. */
        right = "RIGHT",
        /** TODO: Add documentation to up. */
        up = "UP",
        /** TODO: Add documentation to down. */
        down = "DOWN",
    }
    
    /** A Test is a test model. */
    export interface ITestModel {
        /** The name. */
        name: string
        /** The age. */
        age: number
        /** The number pi. */
        pi: number
        /** The birth date. */
        birthdate: firestore.Timestamp
        /** True if it is good. */
        isGood: boolean
        /** TODO: Add documentation to data. */
        data: firestore.Blob
        /** TODO: Add documentation to friend. */
        friend: DocumentReference<ITestModel>
        /** TODO: Add documentation to location. */
        location: firestore.GeoPoint
        /** TODO: Add documentation to colors. */
        colors: string[]
        /** TODO: Add documentation to meta. */
        meta: { [key: string]: any; }
        /** TODO: Add documentation to direction. */
        direction: Direction
        /** TODO: Add documentation to test_file. */
        testFile: IFile
        /** TODO: Add documentation to url. */
        url: URL
        /** TODO: Add documentation to nested. */
        nested: { [key: string]: ITestModel; }
    }
    
}===================== Close ===================
===================== Flush ===================
