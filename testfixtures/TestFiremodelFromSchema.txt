===================== ./swift/ ===================
===================== Open firemodel.swift ===================
// DO NOT EDIT - Code generated by firemodel.

import Foundation
import Pring

// TODO: Add documentation to TestDirection.
@objc enum TestDirection: Int {
    // TODO: Add documentation to left.
    case left
    // TODO: Add documentation to right.
    case right
    // TODO: Add documentation to up.
    case up
    // TODO: Add documentation to down.
    case down
}

extension TestDirection: CustomDebugStringConvertible {
    init?(firestoreValue value: Any?) {
        guard let value = value as? String else {
            return nil
        }
        switch value {
        case "LEFT":
            self = .left
        case "RIGHT":
            self = .right
        case "UP":
            self = .up
        case "DOWN":
            self = .down
        default:
            return nil
        }
    }

    var firestoreValue: String? {
        switch self {
        case .left:
            return "LEFT"
        case .right:
            return "RIGHT"
        case .up:
            return "UP"
        case .down:
            return "DOWN"
        default:
            return nil
        }
    }

    var debugDescription: String { return firestoreValue ?? "<INVALID>" }
}

// A Test is a test model.
@objcMembers class TestModel: Pring.Object {
    static var userId: String = ""
    override class var path: String { return "users/\(userId)/test_models" }

    // The name.
    dynamic var name: String?
    // The age.
    dynamic var age: Int = 0
    // The number pi.
    dynamic var pi: Float = 0.0
    // The birth date.
    dynamic var birthdate: Date = Date()
    // True if it is good.
    dynamic var isGood: Bool = false
    // TODO: Add documentation to data.
    dynamic var data: Data?
    // TODO: Add documentation to friend.
    dynamic var friend: Pring.Reference<TestModel> = .init()
    // TODO: Add documentation to location.
    dynamic var location: Pring.GeoPoint?
    // TODO: Add documentation to colors.
    dynamic var colors: [String] = []
    // TODO: Add documentation to directions.
    dynamic var directions: [TestDirection] = []
    // TODO: Add documentation to meta.
    dynamic var meta: [AnyHashable: Any] = [:]
    // TODO: Add documentation to metaStrs.
    dynamic var metaStrs: [String: String] = [:]
    // TODO: Add documentation to direction.
    dynamic var direction: TestDirection?
    // TODO: Add documentation to testFile.
    dynamic var testFile: Pring.File?
    // TODO: Add documentation to url.
    dynamic var url: URL?
    // TODO: Add documentation to nested.
    dynamic var nested: TestModel?
    // TODO: Add documentation to nested_collection.
    dynamic var nestedCollection: Pring.NestedCollection<TestModel> = []

    override func encode(_ key: String, value: Any?) -> Any? {
        switch key {
        case "direction":
            return self.direction?.firestoreValue
        default:
            break
        }
        return nil
    }

    override func decode(_ key: String, value: Any?) -> Bool {
        switch key {
        case "direction":
            self.direction = Direction(firestoreValue: value)
        default:
            break
        }
        return false
    }
}

// TODO: Add documentation to TestTimestamps.
@objcMembers class TestTimestamps: Pring.Object {
        override class var path: String { return "" }


    
}
===================== Close ===================
===================== Flush ===================
===================== ./go ===================
===================== Open test_model.firemodel.go ===================
// DO NOT EDIT - Code generated by firemodel.

package firemodel

import (
	firestore "cloud.google.com/go/firestore"
	"fmt"
	runtime "github.com/mickeyreiss/firemodel/runtime"
	latlng "google.golang.org/genproto/googleapis/type/latlng"
	"time"
)

// A Test is a test model.
//
// Firestore document location: /users/{user_id}/test_models
type TestModel struct {
	// The name.
	Name string `firestore:"name"`
	// The age.
	Age int64 `firestore:"age"`
	// The number pi.
	Pi float64 `firestore:"pi"`
	// The birth date.
	Birthdate time.Time `firestore:"birthdate"`
	// True if it is good.
	IsGood bool `firestore:"isGood"`
	// TODO: Add comment to TestModel.data.
	Data []byte `firestore:"data"`
	// TODO: Add comment to TestModel.friend.
	Friend *firestore.DocumentRef `firestore:"friend"`
	// TODO: Add comment to TestModel.location.
	Location *latlng.LatLng `firestore:"location"`
	// TODO: Add comment to TestModel.colors.
	Colors []string `firestore:"colors"`
	// TODO: Add comment to TestModel.directions.
	Directions []TestDirection `firestore:"directions"`
	// TODO: Add comment to TestModel.meta.
	Meta map[string]interface{} `firestore:"meta"`
	// TODO: Add comment to TestModel.meta_strs.
	MetaStrs map[string]string `firestore:"metaStrs"`
	// TODO: Add comment to TestModel.direction.
	Direction TestDirection `firestore:"direction"`
	// TODO: Add comment to TestModel.test_file.
	TestFile *runtime.File `firestore:"testFile"`
	// TODO: Add comment to TestModel.url.
	Url runtime.URL `firestore:"url"`
	// TODO: Add comment to TestModel.nested.
	Nested *TestModel `firestore:"nested"`

	// Creation timestamp.
	CreatedAt time.Time `firestore:"createdAt,serverTimestamp"`
	// Update timestamp.
	UpdatedAt time.Time `firestore:"updatedAt,serverTimestamp"`
}

// TestModelPath returns the path to a particular TestModel in Firestore.
func TestModelPath(userId string) string {
	return fmt.Sprintf("users/%s/test_models", userId)
}
===================== Close ===================
===================== Open test_timestamps.firemodel.go ===================
// DO NOT EDIT - Code generated by firemodel.

package firemodel

import "time"

// TODO: Add comment to TestTimestamps
type TestTimestamps struct {

	// Creation timestamp.
	CreatedAt time.Time `firestore:"createdAt,serverTimestamp"`
	// Update timestamp.
	UpdatedAt time.Time `firestore:"updatedAt,serverTimestamp"`
}
===================== Close ===================
===================== Open test_direction.firemodel.go ===================
// DO NOT EDIT - Code generated by firemodel.

package firemodel

// TODO: Add comment to TestDirection
type TestDirection string

const (
	TestDirection_LEFT  TestDirection = "LEFT"
	TestDirection_RIGHT TestDirection = "RIGHT"
	TestDirection_UP    TestDirection = "UP"
	TestDirection_DOWN  TestDirection = "DOWN"
)
===================== Close ===================
===================== Flush ===================
===================== ./ts/ ===================
===================== Open firemodel.d.ts ===================
// DO NOT EDIT - Code generated by firemodel.

import firebase from 'firebase';

export namespace example {
  type URL = string;

  export interface IFile {
    url: URL;
    mimeType: string;
    name: string;
  }

  export interface DocumentReference<T> extends firebase.firestore.DocumentReference {
  }

  /** TODO: Add documentation to TestDirection. */
  export enum TestDirection {
    /** TODO: Add documentation to left. */
    left = "LEFT",
    /** TODO: Add documentation to right. */
    right = "RIGHT",
    /** TODO: Add documentation to up. */
    up = "UP",
    /** TODO: Add documentation to down. */
    down = "DOWN",
  }

  /** A Test is a test model. */
  export interface ITestModel {
    /** TODO: Add documentation to nested_collection. */
    nestedCollection: firebase.firestore.CollectionReference<ITestModel>;
    /** The name. */
    name: string;
    /** The age. */
    age: number;
    /** The number pi. */
    pi: number;
    /** The birth date. */
    birthdate: firebase.firestore.Timestamp;
    /** True if it is good. */
    isGood: boolean;
    /** TODO: Add documentation to data. */
    data: firebase.firestore.Blob;
    /** TODO: Add documentation to friend. */
    friend: DocumentReference<ITestModel>;
    /** TODO: Add documentation to location. */
    location: firebase.firestore.GeoPoint;
    /** TODO: Add documentation to colors. */
    colors: string[];
    /** TODO: Add documentation to directions. */
    directions: TestDirection[];
    /** TODO: Add documentation to meta. */
    meta: { [key: string]: any; };
    /** TODO: Add documentation to meta_strs. */
    metaStrs: { [key: string]: string; };
    /** TODO: Add documentation to direction. */
    direction: TestDirection;
    /** TODO: Add documentation to test_file. */
    testFile: IFile;
    /** TODO: Add documentation to url. */
    url: URL;
    /** TODO: Add documentation to nested. */
    nested: ITestModel;

    /** Record creation timestamp. */
    createdAt: firebase.firestore.Timestamp;
    /** Record update timestamp. */
    updatedAt: firebase.firestore.Timestamp;
  }

  /** TODO: Add documentation to TestTimestamps. */
  export interface ITestTimestamps {

    /** Record creation timestamp. */
    createdAt: firebase.firestore.Timestamp;
    /** Record update timestamp. */
    updatedAt: firebase.firestore.Timestamp;
  }
}
===================== Close ===================
===================== Flush ===================
